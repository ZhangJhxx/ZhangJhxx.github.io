{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/cookie.md","hash":"9ec2eefd6ad98d69d3c4af6fb445de9d50fcda14","modified":1646308652934},{"_id":"source/_posts/css两栏布局-三栏布局.md","hash":"a19cc6210a4154a4f293307d7097b7fa51c40eb3","modified":1646182347052},{"_id":"source/_posts/hexo基础命令.md","hash":"115f4dc2ab3d0b79897c4805bb873b06bb176fb4","modified":1645966672661},{"_id":"source/_posts/react-合成事件.md","hash":"73a1125cfcc8c569df04c320259ab856f9e51730","modified":1645876508550},{"_id":"source/_posts/typora-picGo-aliyun—oss配置图床.md","hash":"5719af2067feb3398c71b42aaa32ac990c1af10f","modified":1646186423958},{"_id":"source/_posts/字节头条前端实习一二三面-hr面.md","hash":"a2a2c22dc394b033fc57f7b66588f565384e4140","modified":1646312071320},{"_id":"source/_posts/实现模板字符串-replace复习.md","hash":"459ed67ca6ce3d6cdc2a8a4819062ee735469f18","modified":1645965219636},{"_id":"source/_posts/手撕前端算法.md","hash":"565fbcd55524d862c82722006aa51e2e1216f04d","modified":1645878556278},{"_id":"source/about/index.md","hash":"24405985382e108d1e2eb8bd62a01eab0084a9c9","modified":1642051699814},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1644414525731},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1644414525731},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1644414525731},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1644414525736},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1644414525737},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1644414525737},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1644414525737},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1644414525738},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1644414525738},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1644414525747},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1644414525780},{"_id":"themes/next/_config.yml","hash":"e5d4ee5c53dad5ca46ce27ee54043d327abd52ee","modified":1644414525738},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1644414525732},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1644414525732},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1644414525734},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1644414525734},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1644414525734},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1644414525735},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1644414525735},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1644414525735},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1644414525736},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1644414525740},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1644414525736},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1644414525736},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1644414525739},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1644414525739},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1644414525740},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1644414525740},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1644414525741},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1644414525741},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1644414525742},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1644414525742},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1644414525747},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1644414525748},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1644414525748},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1644414525748},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1644414525749},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1644414525749},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1644414525749},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1644414525750},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1644414525750},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1644414525751},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1644414525750},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1644414525751},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1644414525751},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1644414525752},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1644414525752},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1644414525752},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1644414525752},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1644414525753},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1644414525754},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1644414525753},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1644414525755},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1644414525754},{"_id":"themes/next/languages/zh-CN.yml","hash":"81d73e21402dad729053a3041390435f43136a68","modified":1644414525753},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1644414525778},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1644414525778},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1644414525779},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1644414525779},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1644414525779},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1644414525787},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1644414525780},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1644414525733},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1644414525733},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1644414525734},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1644414525733},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1644414525743},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1644414525743},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1644414525743},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1644414525744},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1644414525744},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1644414525744},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1644414525745},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1644414525745},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1644414525745},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1644414525746},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1644414525746},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1644414525755},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1644414525746},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1644414525747},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1644414525756},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1644414525756},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1644414525765},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1644414525765},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1644414525766},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1644414525756},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1644414525768},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e031914c98f082d918ece4c35fdd0a5be1c4e845","modified":1644414525757},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1644414525760},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1644414525767},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1644414525761},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1644414525764},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1644414525770},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1644414525773},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1644414525774},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1644414525781},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1644414525774},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1644414525787},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1644414525786},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1644414525787},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1644414525785},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1644414525787},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1644414525785},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1644414525785},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1644414525786},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1644414525786},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1644414525788},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1644414525788},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1644414525789},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1644414525789},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1644414525790},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1644414525790},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1644414525789},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1644414525790},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1644414525790},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1644414525791},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1644414525791},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1644414525814},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1644414525824},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1644414525823},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1644414525824},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1644414525825},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1644414525825},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1644414525826},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1644414525825},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1644414525826},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1644414525827},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1644414525827},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1644414525827},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1644414525826},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1644414525828},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1644414525827},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1644414525829},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1644414525828},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1644414525829},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1644414525829},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1644414525830},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1644414525831},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1644414525831},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1644414525767},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1644414525766},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1644414525765},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1644414525767},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1644414525758},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1644414525766},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1644414525758},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1644414525759},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1644414525757},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1644414525759},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1644414525759},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1644414525757},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1644414525761},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1644414525760},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1644414525760},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1644414525761},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1644414525762},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1644414525762},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1644414525762},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1644414525768},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1644414525764},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1644414525769},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1644414525769},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1644414525763},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1644414525769},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1644414525763},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1644414525763},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1644414525771},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1644414525771},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1644414525772},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1644414525772},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1644414525773},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1644414525772},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1644414525773},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1644414525774},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1644414525774},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1644414525770},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1644414525770},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1644414525775},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1644414525778},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1644414525775},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1644414525775},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1644414525778},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1644414525776},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1644414525776},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1644414525777},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1644414525777},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1644414525777},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1644414525781},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1644414525781},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1644414525782},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1644414525782},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1644414525783},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1644414525783},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1644414525783},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1644414525783},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1644414525784},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1644414525821},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1644414525784},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1644414525784},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1644414525822},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1644414525822},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1644414525822},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1644414525823},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1644414525830},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1644414525830},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1644414525834},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1644414525835},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1644414525792},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1644414525792},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1644414525793},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1644414525798},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1644414525815},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1644414525803},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1644414525803},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1644414525816},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1644414525815},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1644414525816},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1644414525816},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1644414525817},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1644414525817},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1644414525817},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1644414525818},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1644414525818},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1644414525819},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1644414525819},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1644414525818},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1644414525819},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1644414525820},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1644414525820},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1644414525821},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1644414525820},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1644414525807},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1644414525807},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1644414525810},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1644414525808},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1644414525811},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1644414525811},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1644414525811},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1644414525814},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1644414525832},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1644414525833},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1644414525795},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1644414525796},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1644414525796},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1644414525797},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1644414525796},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1644414525797},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcd64c23d17775b3635325f6758b648d932e79b5","modified":1644414525798},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1644414525793},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1644414525793},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1644414525797},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1644414525794},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1644414525794},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1644414525798},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1644414525794},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1644414525799},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1644414525799},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1644414525800},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1644414525799},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1644414525801},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1644414525801},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1644414525801},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1644414525802},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1644414525802},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1644414525802},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1644414525800},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1644414525803},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1644414525804},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1644414525805},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1644414525804},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1644414525805},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1644414525805},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1644414525805},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1644414525806},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1644414525806},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1644414525806},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1644414525807},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1644414525808},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1644414525808},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1644414525810},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1644414525810},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1644414525812},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1644414525812},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1644414525812},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1644414525813},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1644414525813},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1644414525813},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1644414525813},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1644414525833},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1644414525834},{"_id":"public/about/index.html","hash":"73725600f0051007e16741d4665bb5dcd3897361","modified":1646312088816},{"_id":"public/2022/03/03/cookie/index.html","hash":"02fb97e866131aaf78101c493219b5c6c871d4d7","modified":1646312088816},{"_id":"public/2022/03/02/typora-picGo-aliyun—oss配置图床/index.html","hash":"2bf4c45a31fea4d5e9f3abec3e1d7faa8d45c465","modified":1646312088816},{"_id":"public/2022/02/27/实现模板字符串-replace复习/index.html","hash":"5abf9f54bf6520dbaeb2f673679e52764003dbde","modified":1646312088816},{"_id":"public/archives/index.html","hash":"ee8468f351afe6d01e3478b0105b7b7f9571fa16","modified":1646312088816},{"_id":"public/archives/2022/index.html","hash":"4268caebf80f4d6e31a0e5299a5dcbc437eaab3a","modified":1646312088816},{"_id":"public/archives/2022/01/index.html","hash":"a0987b466cc9caf343f778349dd16d30bcdf940a","modified":1646312088816},{"_id":"public/archives/2022/02/index.html","hash":"fc9e0529db89cc5474e153286c97aa03fe536611","modified":1646312088816},{"_id":"public/archives/2022/03/index.html","hash":"573563fa83c82b1a41b4ddef07e3f7965b18ae60","modified":1646312088816},{"_id":"public/tags/cookie/index.html","hash":"2e94b182e1db377624026e399cfdebcf2d7ec820","modified":1646312088816},{"_id":"public/tags/BFC-两栏布局-圣杯布局-双飞翼布局/index.html","hash":"4208134998f2e6efe0daea31f3aa60e610d8703b","modified":1646312088816},{"_id":"public/tags/react-源码学习/index.html","hash":"ebc1d3011e00f4c8cef92a8f6723a74d4bce438e","modified":1646312088816},{"_id":"public/tags/typora-picGo-oss/index.html","hash":"a97a052ceea179158607d60c9b2fa708440e9981","modified":1646312088816},{"_id":"public/tags/字节-前端面试/index.html","hash":"c94146a3666079544c4d022df78c00c6de34a34c","modified":1646312088816},{"_id":"public/tags/模板字符串实现-replace/index.html","hash":"3da87d98e59cc2ca8c5d5d37f088a880dc36a28b","modified":1646312088816},{"_id":"public/tags/算法/index.html","hash":"9d725fe7ef49b730ab8a3cf4d2b4f4b13ceb0443","modified":1646312088816},{"_id":"public/2022/03/02/字节头条前端实习一二三面-hr面/index.html","hash":"37468be3c70a60de2e13d53be4e94c984dadc610","modified":1646312088816},{"_id":"public/2022/02/28/css两栏布局-三栏布局/index.html","hash":"b6cfb635a96bd3275fc5894eca17b431606032c3","modified":1646312088816},{"_id":"public/2022/02/26/react-合成事件/index.html","hash":"02d04d69db8a7c3e2634755f78c5a0236cff2e73","modified":1646312088816},{"_id":"public/2022/02/09/手撕前端算法/index.html","hash":"bb936245826ad01089476110e4f92aaa3bf8f04f","modified":1646312088816},{"_id":"public/2022/01/12/hexo基础命令/index.html","hash":"04fd846cbcf58363d0806b0c794048a1f012f703","modified":1646312088816},{"_id":"public/index.html","hash":"b04323b7d0d99d2156a5c9d5b85e314f9d4353eb","modified":1646312088816},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1646312088816},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1646312088816},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1646312088816},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1646312088816},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1646312088816},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1646312088816},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1646312088816},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1646312088816},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1646312088816},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1646312088816},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1646312088816},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1646312088816},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1646312088816},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1646312088816},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1646312088816},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1646312088816},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1646312088816},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1646312088816},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1646312088816},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1646312088816},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1646312088816},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1646312088816},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1646312088816},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1646312088816},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1646312088816},{"_id":"public/css/main.css","hash":"35883f4e2dfb747d72983b52d7d94b615655a8a0","modified":1646312088816},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1646312088816},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1646312088816},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1646312088816}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2022-01-13T05:28:19.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-01-13 13:28:19\n---\n","updated":"2022-01-13T05:28:19.814Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl0azplyh0000q8w53iwsfpnq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"cookie","date":"2022-03-03T11:57:19.000Z","_content":"\n\n","source":"_posts/cookie.md","raw":"---\ntitle: cookie\ndate: 2022-03-03 19:57:19\ntags: cookie\n---\n\n\n","slug":"cookie","published":1,"updated":"2022-03-03T11:57:32.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyj0001q8w5dr9whs3t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo基础命令","_content":"\n\n## Quick Start\n### 初始化站点 `hexo init`\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n### cache clean\n``` bash\n$ hexo clean\n```\n### Generate static files\n\n``` bash\n$ hexo generate\n$ hexo g\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n$ hexo d\n```\n\n### 报错记录1\n```\nFailed to connect to github.com port 443 after 21061 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (D:\\hexo\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      ...\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n### 解决方法\n#### 进入站点根目录\n`cd /usr/local/src/hexo/hanyubolg/`\n\n#### 删除git提交内容文件夹\n`rm -rf .deploy_git/`\n\n#### 执行\n`git config --global core.autocrlf false`\n\n#### 最后\n`hexo clean && hexo g && hexo d`\n\n### 报错记录2\n```\nOpenSSL SSL_read: Connection was reset, errno 10054\n```\n> 首先，造成这个错误很有可能是网络不稳定，连接超时导致的，\n如果再次尝试后依然报错，可以执行下面的命令\n`git config --global http.sslVerify \"false\"`\n\n","source":"_posts/hexo基础命令.md","raw":"---\ntitle: hexo基础命令\n---\n\n\n## Quick Start\n### 初始化站点 `hexo init`\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n### Run server\n\n``` bash\n$ hexo server\n$ hexo s\n```\n### cache clean\n``` bash\n$ hexo clean\n```\n### Generate static files\n\n``` bash\n$ hexo generate\n$ hexo g\n```\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n$ hexo d\n```\n\n### 报错记录1\n```\nFailed to connect to github.com port 443 after 21061 ms: Timed out\nFATAL {\n  err: Error: Spawn failed\n      at ChildProcess.<anonymous> (D:\\hexo\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)\n      ...\n  }\n} Something's wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html\n```\n\n### 解决方法\n#### 进入站点根目录\n`cd /usr/local/src/hexo/hanyubolg/`\n\n#### 删除git提交内容文件夹\n`rm -rf .deploy_git/`\n\n#### 执行\n`git config --global core.autocrlf false`\n\n#### 最后\n`hexo clean && hexo g && hexo d`\n\n### 报错记录2\n```\nOpenSSL SSL_read: Connection was reset, errno 10054\n```\n> 首先，造成这个错误很有可能是网络不稳定，连接超时导致的，\n如果再次尝试后依然报错，可以执行下面的命令\n`git config --global http.sslVerify \"false\"`\n\n","slug":"hexo基础命令","published":1,"date":"2022-01-12T10:47:13.689Z","updated":"2022-02-27T12:57:52.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyl0002q8w56jb223n4","content":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"初始化站点-hexo-init\"><a href=\"#初始化站点-hexo-init\" class=\"headerlink\" title=\"初始化站点 hexo init\"></a>初始化站点 <code>hexo init</code></h3><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-clean\"><a href=\"#cache-clean\" class=\"headerlink\" title=\"cache clean\"></a>cache clean</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报错记录1\"><a href=\"#报错记录1\" class=\"headerlink\" title=\"报错记录1\"></a>报错记录1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to connect to github.com port 443 after 21061 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (D:\\hexo\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"进入站点根目录\"><a href=\"#进入站点根目录\" class=\"headerlink\" title=\"进入站点根目录\"></a>进入站点根目录</h4><p><code>cd /usr/local/src/hexo/hanyubolg/</code></p>\n<h4 id=\"删除git提交内容文件夹\"><a href=\"#删除git提交内容文件夹\" class=\"headerlink\" title=\"删除git提交内容文件夹\"></a>删除git提交内容文件夹</h4><p><code>rm -rf .deploy_git/</code></p>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p><code>git config --global core.autocrlf false</code></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n<h3 id=\"报错记录2\"><a href=\"#报错记录2\" class=\"headerlink\" title=\"报错记录2\"></a>报错记录2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>首先，造成这个错误很有可能是网络不稳定，连接超时导致的，<br>如果再次尝试后依然报错，可以执行下面的命令<br><code>git config --global http.sslVerify &quot;false&quot;</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"初始化站点-hexo-init\"><a href=\"#初始化站点-hexo-init\" class=\"headerlink\" title=\"初始化站点 hexo init\"></a>初始化站点 <code>hexo init</code></h3><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">$ hexo s</span><br></pre></td></tr></table></figure>\n<h3 id=\"cache-clean\"><a href=\"#cache-clean\" class=\"headerlink\" title=\"cache clean\"></a>cache clean</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br><span class=\"line\">$ hexo g</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"报错记录1\"><a href=\"#报错记录1\" class=\"headerlink\" title=\"报错记录1\"></a>报错记录1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Failed to connect to github.com port 443 after 21061 ms: Timed out</span><br><span class=\"line\">FATAL &#123;</span><br><span class=\"line\">  err: Error: Spawn failed</span><br><span class=\"line\">      at ChildProcess.&lt;anonymous&gt; (D:\\hexo\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21)</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"进入站点根目录\"><a href=\"#进入站点根目录\" class=\"headerlink\" title=\"进入站点根目录\"></a>进入站点根目录</h4><p><code>cd /usr/local/src/hexo/hanyubolg/</code></p>\n<h4 id=\"删除git提交内容文件夹\"><a href=\"#删除git提交内容文件夹\" class=\"headerlink\" title=\"删除git提交内容文件夹\"></a>删除git提交内容文件夹</h4><p><code>rm -rf .deploy_git/</code></p>\n<h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><p><code>git config --global core.autocrlf false</code></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n<h3 id=\"报错记录2\"><a href=\"#报错记录2\" class=\"headerlink\" title=\"报错记录2\"></a>报错记录2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>首先，造成这个错误很有可能是网络不稳定，连接超时导致的，<br>如果再次尝试后依然报错，可以执行下面的命令<br><code>git config --global http.sslVerify &quot;false&quot;</code></p>\n</blockquote>\n"},{"title":"css两栏布局&三栏布局","date":"2022-02-28T01:55:37.000Z","_content":"\n### BFC应用：实现两栏布局\n\n```html\n<div class=\"container\">\n  <div class=\"left\"></div>\n  <div class=\"right\"></div>\n</div>\n```\n\n```css\n.container{\n}\n.left{\n  background-color: red;\n  width: 300px;\n  height: 300px;\n  float: left;\n}\n.right{\n  background-color: green;\n  height: 400px;\n  /* overflow: hidden; */\n}\n```\n\n此时红色块覆盖在绿色块上，float脱离了文档流\n[![butmqK.md.png](https://s4.ax1x.com/2022/02/28/butmqK.md.png)](https://imgtu.com/i/butmqK)\n为div.right开启BFC\n\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n计算BFC的高度时，浮动元素也参与计算。**也就是说BFC的区域不会与float box重叠**。\n```css\n.right{\n\toverflow:hidden;\n}\n```\n绿色块此时不与红色块重叠\n[![buw0vd.md.png](https://s4.ax1x.com/2022/02/28/buw0vd.md.png)](https://imgtu.com/i/buw0vd)\n### 三栏布局\n圣杯布局","source":"_posts/css两栏布局-三栏布局.md","raw":"---\ntitle: css两栏布局&三栏布局\ndate: 2022-02-28 09:55:37\ntags: BFC, 两栏布局, 圣杯布局, 双飞翼布局\n---\n\n### BFC应用：实现两栏布局\n\n```html\n<div class=\"container\">\n  <div class=\"left\"></div>\n  <div class=\"right\"></div>\n</div>\n```\n\n```css\n.container{\n}\n.left{\n  background-color: red;\n  width: 300px;\n  height: 300px;\n  float: left;\n}\n.right{\n  background-color: green;\n  height: 400px;\n  /* overflow: hidden; */\n}\n```\n\n此时红色块覆盖在绿色块上，float脱离了文档流\n[![butmqK.md.png](https://s4.ax1x.com/2022/02/28/butmqK.md.png)](https://imgtu.com/i/butmqK)\n为div.right开启BFC\n\n> BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。\n计算BFC的高度时，浮动元素也参与计算。**也就是说BFC的区域不会与float box重叠**。\n```css\n.right{\n\toverflow:hidden;\n}\n```\n绿色块此时不与红色块重叠\n[![buw0vd.md.png](https://s4.ax1x.com/2022/02/28/buw0vd.md.png)](https://imgtu.com/i/buw0vd)\n### 三栏布局\n圣杯布局","slug":"css两栏布局-三栏布局","published":1,"updated":"2022-03-02T00:52:27.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyo0004q8w58ohk63x7","content":"<h3 id=\"BFC应用：实现两栏布局\"><a href=\"#BFC应用：实现两栏布局\" class=\"headerlink\" title=\"BFC应用：实现两栏布局\"></a>BFC应用：实现两栏布局</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* overflow: hidden; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时红色块覆盖在绿色块上，float脱离了文档流<br><a href=\"https://imgtu.com/i/butmqK\"><img src=\"https://s4.ax1x.com/2022/02/28/butmqK.md.png\" alt=\"butmqK.md.png\"></a><br>为div.right开启BFC</p>\n<blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。<br>计算BFC的高度时，浮动元素也参与计算。<strong>也就是说BFC的区域不会与float box重叠</strong>。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绿色块此时不与红色块重叠<br><a href=\"https://imgtu.com/i/buw0vd\"><img src=\"https://s4.ax1x.com/2022/02/28/buw0vd.md.png\" alt=\"buw0vd.md.png\"></a></p>\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><p>圣杯布局</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BFC应用：实现两栏布局\"><a href=\"#BFC应用：实现两栏布局\" class=\"headerlink\" title=\"BFC应用：实现两栏布局\"></a>BFC应用：实现两栏布局</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* overflow: hidden; */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时红色块覆盖在绿色块上，float脱离了文档流<br><a href=\"https://imgtu.com/i/butmqK\"><img src=\"https://s4.ax1x.com/2022/02/28/butmqK.md.png\" alt=\"butmqK.md.png\"></a><br>为div.right开启BFC</p>\n<blockquote>\n<p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。<br>计算BFC的高度时，浮动元素也参与计算。<strong>也就是说BFC的区域不会与float box重叠</strong>。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">overflow</span>:hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绿色块此时不与红色块重叠<br><a href=\"https://imgtu.com/i/buw0vd\"><img src=\"https://s4.ax1x.com/2022/02/28/buw0vd.md.png\" alt=\"buw0vd.md.png\"></a></p>\n<h3 id=\"三栏布局\"><a href=\"#三栏布局\" class=\"headerlink\" title=\"三栏布局\"></a>三栏布局</h3><p>圣杯布局</p>\n"},{"title":"react 合成事件","date":"2022-02-26T08:50:13.000Z","_content":"### 合成事件\nReact有自己的一套事件机制,它重新封装了绝大部分的原生事件。\n\n由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。\n\n为此，React提供了一种“顶层注册，事件收集，统一触发”的事件机制。\n\n这套机制规避了无法将事件直接绑定到DOM节点上的问题，并且能够很好地利用fiber树的层级关系来生成事件执行路径，进而模拟事件捕获和冒泡，另外还带来两个非常重要的特性：\n\n- 对事件进行归类，可以在事件产生的任务上包含不同的优先级\n- 提供合成事件对象，抹平浏览器的兼容性差异\n\nREACT 16下\n\n>合成事件采用了事件池，这样做可以大大节省内存，而不会频繁的创建和销毁事件对象。React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。\n\nREACT 17下\n> React 不再将事件添加在document 上，而是添加到渲染 React 树的根 DOM 容器中。并且除去了事件池\n\n[![bZUQhR.md.png](https://s4.ax1x.com/2022/02/26/bZUQhR.md.png)](https://imgtu.com/i/bZUQhR)\n\n```react\nconst App = () =>{\n  const parentRef = useRef(null);\n  const childRef = useRef(null);\n  useEffect(()=>{\n    //绑定原生事件\n    parentRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----父元素捕获\");\n    },true)\n    parentRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----父元素冒泡\");\n    })\n    childRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----子元素捕获\");\n    },true)\n    childRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----子元素冒泡\");\n    })\n    document.addEventListener(\"click\",()=>{\n      console.log(\"原生----document捕获\");\n    },true)\n    document.addEventListener(\"click\",()=>{\n      console.log(\"原生----document冒泡\");\n    })\n  },[]);\n  function parentBubble (){\n    console.log(\"react----父元素冒泡\");\n  }\n  function childBubble (){\n    console.log(\"react----子元素冒泡\");\n  }\n  function parentCapture (){\n    console.log(\"react----父元素捕获\");\n  }\n  function childCapture (){\n    console.log(\"react----子元素捕获\");\n  }\n  return (\n    //绑定react事件\n    <div ref={parentRef} onClick={parentBubble} onClickCapture={parentCapture}>\n      <div ref={childRef} onClick={childBubble} onClickCapture={childCapture}>\n        <button>事件捕获顺序</button>\n      </div>\n    </div>\n  )\n}\nReactDOM.render(\n  <App />\n  ,document.getElementById('root')\n);\n```\n\n- 在react16下的输出结果\n```\n原生----document捕获\n原生----父元素捕获\n原生----子元素捕获\n原生----子元素冒泡\n原生----父元素冒泡\nreact----父元素捕获\nreact----子元素捕获\nreact----子元素冒泡\nreact----父元素冒泡\n原生----document冒泡\n```\n\n- 在react17下得到输出：\n\n```\n原生----document捕获\nreact----父元素捕获\nreact----子元素捕获\n原生----父元素捕获\n原生----子元素捕获\n原生----子元素冒泡\n原生----父元素冒泡\nreact----子元素冒泡\nreact----父元素冒泡\n原生----document冒泡\n```\n\n#### 模拟react16下合成事件的实现\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">\n    <button>事件捕获顺序</button>\n  </div>\n</div>\n```\n\n```js\nconst parent = document.getElementsByClassName(\"parent\")[0];\nconst child = document.getElementsByClassName(\"child\")[0];\nfunction dispatchEvent(e) {\n  const path = []; //收集所有当前Node的上级目录\n  let current = e.target;\n  while (current) {\n    path.push(current);\n    current = current.parentNode;\n  }\n  for (let i = path.length - 1; i >= 0; i--) {\n    if (path[i].onClickCapture) {\n      path[i].onClickCapture();\n    }\n  }\n  for (let i = 0; i < path.length; i++) {\n    if (path[i].onClick) {\n      path[i].onClick();\n    }\n  }\n}\n//react的合成事件注册要在document注册之前\ndocument.addEventListener(\"click\", dispatchEvent);\nparent.addEventListener(\"click\",() => {console.log(\"原生----父元素捕获\")},true);\nparent.addEventListener(\"click\", () => {console.log(\"原生----父元素冒泡\")});\nchild.addEventListener(\"click\",() => {console.log(\"原生----子元素捕获\")},true);\nchild.addEventListener(\"click\", () => {console.log(\"原生----子元素冒泡\")});\ndocument.addEventListener(\"click\",() => {console.log(\"原生----document捕获\")},true);\ndocument.addEventListener(\"click\", () => {console.log(\"原生----document冒泡\")});\n//react合成事件\nparent.onClickCapture = () => {console.log(\"react----父元素捕获\")};\nparent.onClick = () => {console.log(\"react----父元素冒泡\")};\nchild.onClickCapture = () => {console.log(\"react----子元素捕获\")};\nchild.onClick = () => {console.log(\"react----子元素冒泡\")};\n```\n\n#### 模拟react17下合成事件的实现\n\n```html\n<div id=\"root\">\n  <div class=\"parent\">\n    <div class=\"child\">\n      <button>事件捕获顺序</button>\n    </div>\n  </div>\n</div>\n```\n\n```js\nconst root = document.getElementById(\"root\");\nfunction dispatchEvent(e,captureFlag) {//添加标志位\n  const path = []; //收集所有当前Node的上级目录\n  let current = e.target;\n  while (current) {\n    path.push(current);\n    current = current.parentNode;\n  }\n  if(captureFlag){\n    for (let i = path.length - 1; i >= 0; i--) {\n      if (path[i].onClickCapture) {\n        path[i].onClickCapture();\n      }\n    }\n  }\n  if(!captureFlag){\n    for (let i = 0; i < path.length; i++) {\n      if (path[i].onClick) {\n        path[i].onClick();\n      }\n    }\n  }\n}\n//将绑定至document的事件绑定至根节点\nroot.addEventListener(\"click\", (e)=>{dispatchEvent(e)},true);\nroot.addEventListener(\"click\", (e)=>{dispatchEvent(e)},false);\n```\n\n","source":"_posts/react-合成事件.md","raw":"---\ntitle: react 合成事件\ndate: 2022-02-26 16:50:13\ntags: react,源码学习\n---\n### 合成事件\nReact有自己的一套事件机制,它重新封装了绝大部分的原生事件。\n\n由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。\n\n为此，React提供了一种“顶层注册，事件收集，统一触发”的事件机制。\n\n这套机制规避了无法将事件直接绑定到DOM节点上的问题，并且能够很好地利用fiber树的层级关系来生成事件执行路径，进而模拟事件捕获和冒泡，另外还带来两个非常重要的特性：\n\n- 对事件进行归类，可以在事件产生的任务上包含不同的优先级\n- 提供合成事件对象，抹平浏览器的兼容性差异\n\nREACT 16下\n\n>合成事件采用了事件池，这样做可以大大节省内存，而不会频繁的创建和销毁事件对象。React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。\n\nREACT 17下\n> React 不再将事件添加在document 上，而是添加到渲染 React 树的根 DOM 容器中。并且除去了事件池\n\n[![bZUQhR.md.png](https://s4.ax1x.com/2022/02/26/bZUQhR.md.png)](https://imgtu.com/i/bZUQhR)\n\n```react\nconst App = () =>{\n  const parentRef = useRef(null);\n  const childRef = useRef(null);\n  useEffect(()=>{\n    //绑定原生事件\n    parentRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----父元素捕获\");\n    },true)\n    parentRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----父元素冒泡\");\n    })\n    childRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----子元素捕获\");\n    },true)\n    childRef.current.addEventListener(\"click\",()=>{\n      console.log(\"原生----子元素冒泡\");\n    })\n    document.addEventListener(\"click\",()=>{\n      console.log(\"原生----document捕获\");\n    },true)\n    document.addEventListener(\"click\",()=>{\n      console.log(\"原生----document冒泡\");\n    })\n  },[]);\n  function parentBubble (){\n    console.log(\"react----父元素冒泡\");\n  }\n  function childBubble (){\n    console.log(\"react----子元素冒泡\");\n  }\n  function parentCapture (){\n    console.log(\"react----父元素捕获\");\n  }\n  function childCapture (){\n    console.log(\"react----子元素捕获\");\n  }\n  return (\n    //绑定react事件\n    <div ref={parentRef} onClick={parentBubble} onClickCapture={parentCapture}>\n      <div ref={childRef} onClick={childBubble} onClickCapture={childCapture}>\n        <button>事件捕获顺序</button>\n      </div>\n    </div>\n  )\n}\nReactDOM.render(\n  <App />\n  ,document.getElementById('root')\n);\n```\n\n- 在react16下的输出结果\n```\n原生----document捕获\n原生----父元素捕获\n原生----子元素捕获\n原生----子元素冒泡\n原生----父元素冒泡\nreact----父元素捕获\nreact----子元素捕获\nreact----子元素冒泡\nreact----父元素冒泡\n原生----document冒泡\n```\n\n- 在react17下得到输出：\n\n```\n原生----document捕获\nreact----父元素捕获\nreact----子元素捕获\n原生----父元素捕获\n原生----子元素捕获\n原生----子元素冒泡\n原生----父元素冒泡\nreact----子元素冒泡\nreact----父元素冒泡\n原生----document冒泡\n```\n\n#### 模拟react16下合成事件的实现\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">\n    <button>事件捕获顺序</button>\n  </div>\n</div>\n```\n\n```js\nconst parent = document.getElementsByClassName(\"parent\")[0];\nconst child = document.getElementsByClassName(\"child\")[0];\nfunction dispatchEvent(e) {\n  const path = []; //收集所有当前Node的上级目录\n  let current = e.target;\n  while (current) {\n    path.push(current);\n    current = current.parentNode;\n  }\n  for (let i = path.length - 1; i >= 0; i--) {\n    if (path[i].onClickCapture) {\n      path[i].onClickCapture();\n    }\n  }\n  for (let i = 0; i < path.length; i++) {\n    if (path[i].onClick) {\n      path[i].onClick();\n    }\n  }\n}\n//react的合成事件注册要在document注册之前\ndocument.addEventListener(\"click\", dispatchEvent);\nparent.addEventListener(\"click\",() => {console.log(\"原生----父元素捕获\")},true);\nparent.addEventListener(\"click\", () => {console.log(\"原生----父元素冒泡\")});\nchild.addEventListener(\"click\",() => {console.log(\"原生----子元素捕获\")},true);\nchild.addEventListener(\"click\", () => {console.log(\"原生----子元素冒泡\")});\ndocument.addEventListener(\"click\",() => {console.log(\"原生----document捕获\")},true);\ndocument.addEventListener(\"click\", () => {console.log(\"原生----document冒泡\")});\n//react合成事件\nparent.onClickCapture = () => {console.log(\"react----父元素捕获\")};\nparent.onClick = () => {console.log(\"react----父元素冒泡\")};\nchild.onClickCapture = () => {console.log(\"react----子元素捕获\")};\nchild.onClick = () => {console.log(\"react----子元素冒泡\")};\n```\n\n#### 模拟react17下合成事件的实现\n\n```html\n<div id=\"root\">\n  <div class=\"parent\">\n    <div class=\"child\">\n      <button>事件捕获顺序</button>\n    </div>\n  </div>\n</div>\n```\n\n```js\nconst root = document.getElementById(\"root\");\nfunction dispatchEvent(e,captureFlag) {//添加标志位\n  const path = []; //收集所有当前Node的上级目录\n  let current = e.target;\n  while (current) {\n    path.push(current);\n    current = current.parentNode;\n  }\n  if(captureFlag){\n    for (let i = path.length - 1; i >= 0; i--) {\n      if (path[i].onClickCapture) {\n        path[i].onClickCapture();\n      }\n    }\n  }\n  if(!captureFlag){\n    for (let i = 0; i < path.length; i++) {\n      if (path[i].onClick) {\n        path[i].onClick();\n      }\n    }\n  }\n}\n//将绑定至document的事件绑定至根节点\nroot.addEventListener(\"click\", (e)=>{dispatchEvent(e)},true);\nroot.addEventListener(\"click\", (e)=>{dispatchEvent(e)},false);\n```\n\n","slug":"react-合成事件","published":1,"updated":"2022-02-26T11:55:08.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyp0005q8w5ekzidyat","content":"<h3 id=\"合成事件\"><a href=\"#合成事件\" class=\"headerlink\" title=\"合成事件\"></a>合成事件</h3><p>React有自己的一套事件机制,它重新封装了绝大部分的原生事件。</p>\n<p>由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。</p>\n<p>为此，React提供了一种“顶层注册，事件收集，统一触发”的事件机制。</p>\n<p>这套机制规避了无法将事件直接绑定到DOM节点上的问题，并且能够很好地利用fiber树的层级关系来生成事件执行路径，进而模拟事件捕获和冒泡，另外还带来两个非常重要的特性：</p>\n<ul>\n<li>对事件进行归类，可以在事件产生的任务上包含不同的优先级</li>\n<li>提供合成事件对象，抹平浏览器的兼容性差异</li>\n</ul>\n<p>REACT 16下</p>\n<blockquote>\n<p>合成事件采用了事件池，这样做可以大大节省内存，而不会频繁的创建和销毁事件对象。React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。</p>\n</blockquote>\n<p>REACT 17下</p>\n<blockquote>\n<p>React 不再将事件添加在document 上，而是添加到渲染 React 树的根 DOM 容器中。并且除去了事件池</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/bZUQhR\"><img src=\"https://s4.ax1x.com/2022/02/26/bZUQhR.md.png\" alt=\"bZUQhR.md.png\"></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const App = () =&gt;&#123;</span><br><span class=\"line\">  const parentRef = useRef(null);</span><br><span class=\"line\">  const childRef = useRef(null);</span><br><span class=\"line\">  useEffect(()=&gt;&#123;</span><br><span class=\"line\">    //绑定原生事件</span><br><span class=\"line\">    parentRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----父元素捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    parentRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----父元素冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    childRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----子元素捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    childRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----子元素冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----document捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----document冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,[]);</span><br><span class=\"line\">  function parentBubble ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----父元素冒泡&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function childBubble ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----子元素冒泡&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function parentCapture ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----父元素捕获&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function childCapture ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----子元素捕获&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    //绑定react事件</span><br><span class=\"line\">    &lt;div ref=&#123;parentRef&#125; onClick=&#123;parentBubble&#125; onClickCapture=&#123;parentCapture&#125;&gt;</span><br><span class=\"line\">      &lt;div ref=&#123;childRef&#125; onClick=&#123;childBubble&#125; onClickCapture=&#123;childCapture&#125;&gt;</span><br><span class=\"line\">        &lt;button&gt;事件捕获顺序&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">  ,document.getElementById(&#x27;root&#x27;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在react16下的输出结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生----document捕获</span><br><span class=\"line\">原生----父元素捕获</span><br><span class=\"line\">原生----子元素捕获</span><br><span class=\"line\">原生----子元素冒泡</span><br><span class=\"line\">原生----父元素冒泡</span><br><span class=\"line\">react----父元素捕获</span><br><span class=\"line\">react----子元素捕获</span><br><span class=\"line\">react----子元素冒泡</span><br><span class=\"line\">react----父元素冒泡</span><br><span class=\"line\">原生----document冒泡</span><br></pre></td></tr></table></figure></li>\n<li><p>在react17下得到输出：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生----document捕获</span><br><span class=\"line\">react----父元素捕获</span><br><span class=\"line\">react----子元素捕获</span><br><span class=\"line\">原生----父元素捕获</span><br><span class=\"line\">原生----子元素捕获</span><br><span class=\"line\">原生----子元素冒泡</span><br><span class=\"line\">原生----父元素冒泡</span><br><span class=\"line\">react----子元素冒泡</span><br><span class=\"line\">react----父元素冒泡</span><br><span class=\"line\">原生----document冒泡</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟react16下合成事件的实现\"><a href=\"#模拟react16下合成事件的实现\" class=\"headerlink\" title=\"模拟react16下合成事件的实现\"></a>模拟react16下合成事件的实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>事件捕获顺序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;parent&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;child&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEvent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = []; <span class=\"comment\">//收集所有当前Node的上级目录</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">    path.push(current);</span><br><span class=\"line\">    current = current.parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = path.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path[i].onClickCapture) &#123;</span><br><span class=\"line\">      path[i].onClickCapture();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path[i].onClick) &#123;</span><br><span class=\"line\">      path[i].onClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//react的合成事件注册要在document注册之前</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>, dispatchEvent);</span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----父元素捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----父元素冒泡&quot;</span>)&#125;);</span><br><span class=\"line\">child.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----子元素捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">child.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----子元素冒泡&quot;</span>)&#125;);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----document捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----document冒泡&quot;</span>)&#125;);</span><br><span class=\"line\"><span class=\"comment\">//react合成事件</span></span><br><span class=\"line\">parent.onClickCapture = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----父元素捕获&quot;</span>)&#125;;</span><br><span class=\"line\">parent.onClick = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----父元素冒泡&quot;</span>)&#125;;</span><br><span class=\"line\">child.onClickCapture = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----子元素捕获&quot;</span>)&#125;;</span><br><span class=\"line\">child.onClick = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----子元素冒泡&quot;</span>)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟react17下合成事件的实现\"><a href=\"#模拟react17下合成事件的实现\" class=\"headerlink\" title=\"模拟react17下合成事件的实现\"></a>模拟react17下合成事件的实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>事件捕获顺序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEvent</span>(<span class=\"params\">e,captureFlag</span>) </span>&#123;<span class=\"comment\">//添加标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = []; <span class=\"comment\">//收集所有当前Node的上级目录</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">    path.push(current);</span><br><span class=\"line\">    current = current.parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(captureFlag)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = path.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (path[i].onClickCapture) &#123;</span><br><span class=\"line\">        path[i].onClickCapture();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!captureFlag)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (path[i].onClick) &#123;</span><br><span class=\"line\">        path[i].onClick();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//将绑定至document的事件绑定至根节点</span></span><br><span class=\"line\">root.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;dispatchEvent(e)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">root.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;dispatchEvent(e)&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"合成事件\"><a href=\"#合成事件\" class=\"headerlink\" title=\"合成事件\"></a>合成事件</h3><p>React有自己的一套事件机制,它重新封装了绝大部分的原生事件。</p>\n<p>由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。</p>\n<p>为此，React提供了一种“顶层注册，事件收集，统一触发”的事件机制。</p>\n<p>这套机制规避了无法将事件直接绑定到DOM节点上的问题，并且能够很好地利用fiber树的层级关系来生成事件执行路径，进而模拟事件捕获和冒泡，另外还带来两个非常重要的特性：</p>\n<ul>\n<li>对事件进行归类，可以在事件产生的任务上包含不同的优先级</li>\n<li>提供合成事件对象，抹平浏览器的兼容性差异</li>\n</ul>\n<p>REACT 16下</p>\n<blockquote>\n<p>合成事件采用了事件池，这样做可以大大节省内存，而不会频繁的创建和销毁事件对象。React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。</p>\n</blockquote>\n<p>REACT 17下</p>\n<blockquote>\n<p>React 不再将事件添加在document 上，而是添加到渲染 React 树的根 DOM 容器中。并且除去了事件池</p>\n</blockquote>\n<p><a href=\"https://imgtu.com/i/bZUQhR\"><img src=\"https://s4.ax1x.com/2022/02/26/bZUQhR.md.png\" alt=\"bZUQhR.md.png\"></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const App = () =&gt;&#123;</span><br><span class=\"line\">  const parentRef = useRef(null);</span><br><span class=\"line\">  const childRef = useRef(null);</span><br><span class=\"line\">  useEffect(()=&gt;&#123;</span><br><span class=\"line\">    //绑定原生事件</span><br><span class=\"line\">    parentRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----父元素捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    parentRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----父元素冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    childRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----子元素捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    childRef.current.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----子元素冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----document捕获&quot;);</span><br><span class=\"line\">    &#125;,true)</span><br><span class=\"line\">    document.addEventListener(&quot;click&quot;,()=&gt;&#123;</span><br><span class=\"line\">      console.log(&quot;原生----document冒泡&quot;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,[]);</span><br><span class=\"line\">  function parentBubble ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----父元素冒泡&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function childBubble ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----子元素冒泡&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function parentCapture ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----父元素捕获&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function childCapture ()&#123;</span><br><span class=\"line\">    console.log(&quot;react----子元素捕获&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    //绑定react事件</span><br><span class=\"line\">    &lt;div ref=&#123;parentRef&#125; onClick=&#123;parentBubble&#125; onClickCapture=&#123;parentCapture&#125;&gt;</span><br><span class=\"line\">      &lt;div ref=&#123;childRef&#125; onClick=&#123;childBubble&#125; onClickCapture=&#123;childCapture&#125;&gt;</span><br><span class=\"line\">        &lt;button&gt;事件捕获顺序&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">  ,document.getElementById(&#x27;root&#x27;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在react16下的输出结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生----document捕获</span><br><span class=\"line\">原生----父元素捕获</span><br><span class=\"line\">原生----子元素捕获</span><br><span class=\"line\">原生----子元素冒泡</span><br><span class=\"line\">原生----父元素冒泡</span><br><span class=\"line\">react----父元素捕获</span><br><span class=\"line\">react----子元素捕获</span><br><span class=\"line\">react----子元素冒泡</span><br><span class=\"line\">react----父元素冒泡</span><br><span class=\"line\">原生----document冒泡</span><br></pre></td></tr></table></figure></li>\n<li><p>在react17下得到输出：</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原生----document捕获</span><br><span class=\"line\">react----父元素捕获</span><br><span class=\"line\">react----子元素捕获</span><br><span class=\"line\">原生----父元素捕获</span><br><span class=\"line\">原生----子元素捕获</span><br><span class=\"line\">原生----子元素冒泡</span><br><span class=\"line\">原生----父元素冒泡</span><br><span class=\"line\">react----子元素冒泡</span><br><span class=\"line\">react----父元素冒泡</span><br><span class=\"line\">原生----document冒泡</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟react16下合成事件的实现\"><a href=\"#模拟react16下合成事件的实现\" class=\"headerlink\" title=\"模拟react16下合成事件的实现\"></a>模拟react16下合成事件的实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>事件捕获顺序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> parent = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;parent&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;child&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEvent</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = []; <span class=\"comment\">//收集所有当前Node的上级目录</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">    path.push(current);</span><br><span class=\"line\">    current = current.parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = path.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path[i].onClickCapture) &#123;</span><br><span class=\"line\">      path[i].onClickCapture();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path[i].onClick) &#123;</span><br><span class=\"line\">      path[i].onClick();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//react的合成事件注册要在document注册之前</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>, dispatchEvent);</span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----父元素捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----父元素冒泡&quot;</span>)&#125;);</span><br><span class=\"line\">child.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----子元素捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">child.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----子元素冒泡&quot;</span>)&#125;);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----document捕获&quot;</span>)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;原生----document冒泡&quot;</span>)&#125;);</span><br><span class=\"line\"><span class=\"comment\">//react合成事件</span></span><br><span class=\"line\">parent.onClickCapture = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----父元素捕获&quot;</span>)&#125;;</span><br><span class=\"line\">parent.onClick = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----父元素冒泡&quot;</span>)&#125;;</span><br><span class=\"line\">child.onClickCapture = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----子元素捕获&quot;</span>)&#125;;</span><br><span class=\"line\">child.onClick = <span class=\"function\">() =&gt;</span> &#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;react----子元素冒泡&quot;</span>)&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模拟react17下合成事件的实现\"><a href=\"#模拟react17下合成事件的实现\" class=\"headerlink\" title=\"模拟react17下合成事件的实现\"></a>模拟react17下合成事件的实现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>事件捕获顺序<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatchEvent</span>(<span class=\"params\">e,captureFlag</span>) </span>&#123;<span class=\"comment\">//添加标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> path = []; <span class=\"comment\">//收集所有当前Node的上级目录</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = e.target;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (current) &#123;</span><br><span class=\"line\">    path.push(current);</span><br><span class=\"line\">    current = current.parentNode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(captureFlag)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = path.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (path[i].onClickCapture) &#123;</span><br><span class=\"line\">        path[i].onClickCapture();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!captureFlag)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; path.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (path[i].onClick) &#123;</span><br><span class=\"line\">        path[i].onClick();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//将绑定至document的事件绑定至根节点</span></span><br><span class=\"line\">root.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;dispatchEvent(e)&#125;,<span class=\"literal\">true</span>);</span><br><span class=\"line\">root.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;dispatchEvent(e)&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n"},{"title":"typora+picGo+aliyun—oss配置图床","date":"2022-03-02T00:52:01.000Z","_content":"\n> 实现使用picGo+oss实现typora上传图片自动保存在阿里云\n\n### 1. 阿里云oss \n\n   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_091844.png\" alt=\"2022-03-02_091844\" style=\"zoom:50%;\" /> \n\t\n\t创建bucket\n\t\n   ![2022-03-02_092052](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092052.png)\n   bucket名称将在后续配置中用到\n\n   ![2022-03-02_092501](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092501.png)\n   个人使用可选择1年40G 9￥\n\n### 2. 下载并配置PicGo \n\n   [picGo github地址](https://github.com/Molunerfinn/PicGo/releases)\n\n​\t\t ![2022-03-02_093101](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093101.png)\n\n- 存储空间名为创建bucket的名字\n\n- 存储区域为概览下外网访问的前半部分，如下图\n\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093218.png\" alt=\"2022-03-02_093218\" style=\"zoom:75%;\" />\n\n- 指定路径若不存在会自动创建\n\n- KeyId&KeySecret 为accessKey的ID与Secret \n\n  <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093626.png\" alt=\"2022-03-02_093626\" style=\"zoom:67%;\" /> \n\n  - 选择使用子AccessKey，并配置访问oss的权限\n  \n    ![2022-03-02_093915](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093915.png)\n\n- 最后设为默认图床\n\n### 3. 配置typora\n\n![uTools_1646185259545](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/uTools_1646185259545.png)\n\n- PicGo 路径设置为picGo.exe存放的路径\n\n- 验证图片上传选项\n\n  \n","source":"_posts/typora-picGo-aliyun—oss配置图床.md","raw":"---\ntitle: typora+picGo+aliyun—oss配置图床\ndate: 2022-03-02 08:52:01\ntags: typora, picGo, oss\n---\n\n> 实现使用picGo+oss实现typora上传图片自动保存在阿里云\n\n### 1. 阿里云oss \n\n   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_091844.png\" alt=\"2022-03-02_091844\" style=\"zoom:50%;\" /> \n\t\n\t创建bucket\n\t\n   ![2022-03-02_092052](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092052.png)\n   bucket名称将在后续配置中用到\n\n   ![2022-03-02_092501](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092501.png)\n   个人使用可选择1年40G 9￥\n\n### 2. 下载并配置PicGo \n\n   [picGo github地址](https://github.com/Molunerfinn/PicGo/releases)\n\n​\t\t ![2022-03-02_093101](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093101.png)\n\n- 存储空间名为创建bucket的名字\n\n- 存储区域为概览下外网访问的前半部分，如下图\n\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093218.png\" alt=\"2022-03-02_093218\" style=\"zoom:75%;\" />\n\n- 指定路径若不存在会自动创建\n\n- KeyId&KeySecret 为accessKey的ID与Secret \n\n  <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093626.png\" alt=\"2022-03-02_093626\" style=\"zoom:67%;\" /> \n\n  - 选择使用子AccessKey，并配置访问oss的权限\n  \n    ![2022-03-02_093915](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093915.png)\n\n- 最后设为默认图床\n\n### 3. 配置typora\n\n![uTools_1646185259545](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/uTools_1646185259545.png)\n\n- PicGo 路径设置为picGo.exe存放的路径\n\n- 验证图片上传选项\n\n  \n","slug":"typora-picGo-aliyun—oss配置图床","published":1,"updated":"2022-03-02T02:00:23.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyq0006q8w58o549fdy","content":"<blockquote>\n<p>实现使用picGo+oss实现typora上传图片自动保存在阿里云</p>\n</blockquote>\n<h3 id=\"1-阿里云oss\"><a href=\"#1-阿里云oss\" class=\"headerlink\" title=\"1. 阿里云oss\"></a>1. 阿里云oss</h3>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_091844.png\" alt=\"2022-03-02_091844\" style=\"zoom:50%;\" /> \n    \n<pre><code>创建bucket\n</code></pre>\n<p>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092052.png\" alt=\"2022-03-02_092052\"><br>   bucket名称将在后续配置中用到</p>\n<p>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092501.png\" alt=\"2022-03-02_092501\"><br>   个人使用可选择1年40G 9￥</p>\n<h3 id=\"2-下载并配置PicGo\"><a href=\"#2-下载并配置PicGo\" class=\"headerlink\" title=\"2. 下载并配置PicGo\"></a>2. 下载并配置PicGo</h3><p>   <a href=\"https://github.com/Molunerfinn/PicGo/releases\">picGo github地址</a></p>\n<p>​         <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093101.png\" alt=\"2022-03-02_093101\"></p>\n<ul>\n<li><p>存储空间名为创建bucket的名字</p>\n</li>\n<li><p>存储区域为概览下外网访问的前半部分，如下图</p>\n</li>\n</ul>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093218.png\" alt=\"2022-03-02_093218\" style=\"zoom:75%;\" />\n\n<ul>\n<li><p>指定路径若不存在会自动创建</p>\n</li>\n<li><p>KeyId&amp;KeySecret 为accessKey的ID与Secret </p>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093626.png\" alt=\"2022-03-02_093626\" style=\"zoom:67%;\" /> \n\n<ul>\n<li><p>选择使用子AccessKey，并配置访问oss的权限</p>\n<p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093915.png\" alt=\"2022-03-02_093915\"></p>\n</li>\n</ul>\n</li>\n<li><p>最后设为默认图床</p>\n</li>\n</ul>\n<h3 id=\"3-配置typora\"><a href=\"#3-配置typora\" class=\"headerlink\" title=\"3. 配置typora\"></a>3. 配置typora</h3><p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/uTools_1646185259545.png\" alt=\"uTools_1646185259545\"></p>\n<ul>\n<li><p>PicGo 路径设置为picGo.exe存放的路径</p>\n</li>\n<li><p>验证图片上传选项</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>实现使用picGo+oss实现typora上传图片自动保存在阿里云</p>\n</blockquote>\n<h3 id=\"1-阿里云oss\"><a href=\"#1-阿里云oss\" class=\"headerlink\" title=\"1. 阿里云oss\"></a>1. 阿里云oss</h3>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_091844.png\" alt=\"2022-03-02_091844\" style=\"zoom:50%;\" /> \n    \n<pre><code>创建bucket\n</code></pre>\n<p>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092052.png\" alt=\"2022-03-02_092052\"><br>   bucket名称将在后续配置中用到</p>\n<p>   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_092501.png\" alt=\"2022-03-02_092501\"><br>   个人使用可选择1年40G 9￥</p>\n<h3 id=\"2-下载并配置PicGo\"><a href=\"#2-下载并配置PicGo\" class=\"headerlink\" title=\"2. 下载并配置PicGo\"></a>2. 下载并配置PicGo</h3><p>   <a href=\"https://github.com/Molunerfinn/PicGo/releases\">picGo github地址</a></p>\n<p>​         <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093101.png\" alt=\"2022-03-02_093101\"></p>\n<ul>\n<li><p>存储空间名为创建bucket的名字</p>\n</li>\n<li><p>存储区域为概览下外网访问的前半部分，如下图</p>\n</li>\n</ul>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093218.png\" alt=\"2022-03-02_093218\" style=\"zoom:75%;\" />\n\n<ul>\n<li><p>指定路径若不存在会自动创建</p>\n</li>\n<li><p>KeyId&amp;KeySecret 为accessKey的ID与Secret </p>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093626.png\" alt=\"2022-03-02_093626\" style=\"zoom:67%;\" /> \n\n<ul>\n<li><p>选择使用子AccessKey，并配置访问oss的权限</p>\n<p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/2022-03-02_093915.png\" alt=\"2022-03-02_093915\"></p>\n</li>\n</ul>\n</li>\n<li><p>最后设为默认图床</p>\n</li>\n</ul>\n<h3 id=\"3-配置typora\"><a href=\"#3-配置typora\" class=\"headerlink\" title=\"3. 配置typora\"></a>3. 配置typora</h3><p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/uTools_1646185259545.png\" alt=\"uTools_1646185259545\"></p>\n<ul>\n<li><p>PicGo 路径设置为picGo.exe存放的路径</p>\n</li>\n<li><p>验证图片上传选项</p>\n</li>\n</ul>\n"},{"title":"2022字节头条前端实习一二三面+hr面","date":"2022-03-02T08:56:03.000Z","_content":"> 挂了hr面，当时还是觉得比较可惜\n### 一面\n\n1. 问css: less,sass（可能还问了stylus） 平时有没有在用，熟悉mixin吗\n\n   > 由于平时写的css比较简单，只用到了less很简单的功能。\n\n​\t\t复盘：以sass为例，知识点@mixin与@include , 嵌套，定义变量$, 继承变量@extend。\n\n2.  移动端适配&postcss\n\n   px-to-rem 最为常用\n\n   https://www.jianshu.com/p/8f9aab666c4a\n\n3. rem与em有什么区别\n\n​\t\trem是基于html元素的字体大小来决定，而em则根据使用它的元素的大小决定\n\n4. 浏览器渲染以及强制缓存协商缓存\n\n   https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0\n\n   https://www.jianshu.com/p/9c95db596df5\n\n5. 实现deepClone\n\n   ```js\n   let obj = {\n     a: 1,\n     b: [12, 34, 56],\n     c: function () {\n       console.log(123);\n     },\n     d: {\n       e: 23,\n       f: 34,\n     },\n     set f(value) {\n       this.a = value;\n     },\n     get f() {\n       return this.a;\n     },\n   };\n   ```\n\n   1. 丐版\n\n      ```js\n      return JSON.parse(JSON.stringify(target))\n      ```\n\n      - RegExp、Error对象，则序列化的结果将只得到空对象 RegExp、Error => {}；\n      - 时间对象(date)，则序列化结果：时间对象=>字符串的形式\n      -  function,undefined 丢失\n      - NaN、Infinity和-Infinity，则序列化的结果会变成null\n      - 对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor\n\n   2. 简易实现\n\n      ```js\n      function clone1(source){\n        if(typeof source === \"object\") {\n          const target = Array.isArray(source) ? [] : {};\n          for(let key in source) {\n            target[key] = clone1(source[key]);\n          }\n          return target;\n        }else{\n          return source;\n        }\n      }\n      const target1 = clone1(obj);\n      console.log(target1);//结果无法克隆get set\n      ```\n\n   3. 完整实现      \n\n      ```js\n      let deepClone1 = (source,target ={})=>{\n        if(typeof source === \"object\" && source !== null){ // 判断source不为基本数据类型\n          const names = Object.getOwnPropertyNames(source);\n          for(let i=0;i<names.length;i++){\n            let description = Object.getOwnPropertyDescriptor(source, names[i]);\n            if(typeof description.value === \"object\" && description.value !== null){\n              let val;\n              if(Array.isArray(description.value)){\n                val = [];\n              }else{\n                val = {};\n              }\n              Object.defineProperty(target,names[i],{\n                configurable: description.configurable,\n                enumerable:description.enumerable,\n                value:val,\n                writable: description.writable,\n              })\n              deepClone1(description.value,val);\n            }else{\n              Object.defineProperty(target,names[i],description);\n            }\n          }\n          return target;\n        }else{\n          return source;\n        }\n      }\n      ```\n\n   4. 循环引用的解决方法\n\n      weakMap\n\n6. 版本对比\n\n  类似 https://leetcode-cn.com/problems/compare-version-numbers/\n\n7. react 中setState多次操作，一共会render几次\n\n8. promise setInterval setTimeout 对比\n\n9. 浏览器事件环 EventLoop\n  当微任务正在执行时，有一个同步任务进入，此时会执行哪个任务？\n  当时回答微任务挂起，执行同步任务。×\n  应该是不会终止微任务的执行的。\n  https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n\n### 二面\n1. UDP和HTTP协议是如何连接的\n\n   是个坑，HTTP下层的传输层协议为TCP\n\n2. 问项目\n\n3. 封装get\n\n   大概是这样的\n\n   ```js\n   const o = {\n     a:{\n       b:{\n         c:1\n       }\n     }\n   };\n   function get(obj,selectStr){\n     let splitStr = selectStr.split(\".\");\n     let target = obj;\n     for(let i = 0;i<splitStr.length;i++){\n       target = target[splitStr[i]];\n     }\n     return target;\n   }\n   ```\n\n4. 手写throttle/debounce\n\n   ```js\n   function throttle(callback,delay){\n     let timer;\n     return function(){\n       const context = this;\n       const args = [...arguments];\n       if(timer){\n         return;\n       }\n       timer = setTimeout(()=>{\n         callback.apply(context,args);\n         timer = null;\n       },delay);\n     }\n   }\n   ```\n\n   ```js\n   function debounce(callback,delay,immediate){//immediate标记是否立即被调用\n     let timer;\n     return function(){\n       const context = this;\n       const args = [...arguments];\n       clearTimeout(timer);\n       if(immediate){\n         let startNow = !timer;\n         timer = setTimeout(()=>{\n           timer = null;\n         },delay);\n         if(startNow) callback.apply(context,args);\n       }else{\n         timer = setTimeout(()=>{\n           callback.apply(context,args);\n         },delay)\n       }\n     }\n   }\n   ```\n\n5. 考虑如何实现用户勾选“记住我”的功能\n\n### 三面\n\n1. 行内元素与块级元素对比，列举常用的行内元素\n\n   - `b`,`big`,`i`,`small`\n\n   - `abbr`,`code`,`code`,`em`,`kbd`,`strong`\n\n   - `a`,`br`,`img`,`span`,`sub`,`sup`\n\n   - `button`,`input`,`label`,`textarea`,`select`\n\n- 内容\n\n  - 一般情况下，行内元素只能包含数据和其他行内元素。\n\n  - 而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。\n\n- 格式\n  - 默认情况下，行内元素不会以新行开始，而块级元素会新起一行。\n\n2. 与webpack相似的打包工具\n\n   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\" style=\"zoom:67%;\" /> \n\n   - rollup 更适用于JS库的打包（react、vue、three.js)\n\n     - 代码效率更简洁、效率更高\n\n     - 默认支持 Tree-shaking\n\n       -----\n\n     - 不支持HMR\n\n     - 不支持CommonJs ES新特性\n\n   - parcel\n\n     - 开箱即用，0配置\n\n     - 支持以HTML作为入口\n\n     - 支持HMR\n\n       -----\n     \n     - 根目录不主张放js文件，配置不方便\n\n   - ==unpack== 基于 ESM 的 HMR\n\n     - Snowpack \n\n       - Snowpack利用[JavaScript](https://cloud.tencent.com/product/sms?from=10680)的本机模块系统（称为ESM）来避免不必要的工作并保持流畅的开发体验\n       - ![img](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/79197830-b1a3-11eb-85f6-6fac77c0c9b3.png)\n\n     - vite\n\n       > `vite`会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快\n\n       - 使用`es module`导入代码, 极快的启动速度(ESM)\n\n       - 即时的热模块替换(HMR)\n\n       - 真正的按需编译\n\n         ![1](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/1.png)\n\n3. 最近用到的模块\n\n   可以按不同种类分\n\n   https://www.jianshu.com/p/6836a42ff6ae\n\n   classnames, axios, @testing-library/react, react-create-app,webpack,lodash\n\n\n4. 问项目相关\n5. react JSX是什么，源码相关\n6. 开源协议\n7. package.json 相关\n    script中的命令 默认情况下 会去node_modules/bin下查找，故直接执行右边有可能出错。\n    eg.\n    \"serve\":\"webpack serve --mode=development\"\n    没有全局安装webpack，执行右边命令出错，但是执行npm run serve正常\n  \n","source":"_posts/字节头条前端实习一二三面-hr面.md","raw":"---\ntitle: 2022字节头条前端实习一二三面+hr面\ndate: 2022-03-02 16:56:03\ntags: 字节, 前端面试\n---\n> 挂了hr面，当时还是觉得比较可惜\n### 一面\n\n1. 问css: less,sass（可能还问了stylus） 平时有没有在用，熟悉mixin吗\n\n   > 由于平时写的css比较简单，只用到了less很简单的功能。\n\n​\t\t复盘：以sass为例，知识点@mixin与@include , 嵌套，定义变量$, 继承变量@extend。\n\n2.  移动端适配&postcss\n\n   px-to-rem 最为常用\n\n   https://www.jianshu.com/p/8f9aab666c4a\n\n3. rem与em有什么区别\n\n​\t\trem是基于html元素的字体大小来决定，而em则根据使用它的元素的大小决定\n\n4. 浏览器渲染以及强制缓存协商缓存\n\n   https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0\n\n   https://www.jianshu.com/p/9c95db596df5\n\n5. 实现deepClone\n\n   ```js\n   let obj = {\n     a: 1,\n     b: [12, 34, 56],\n     c: function () {\n       console.log(123);\n     },\n     d: {\n       e: 23,\n       f: 34,\n     },\n     set f(value) {\n       this.a = value;\n     },\n     get f() {\n       return this.a;\n     },\n   };\n   ```\n\n   1. 丐版\n\n      ```js\n      return JSON.parse(JSON.stringify(target))\n      ```\n\n      - RegExp、Error对象，则序列化的结果将只得到空对象 RegExp、Error => {}；\n      - 时间对象(date)，则序列化结果：时间对象=>字符串的形式\n      -  function,undefined 丢失\n      - NaN、Infinity和-Infinity，则序列化的结果会变成null\n      - 对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor\n\n   2. 简易实现\n\n      ```js\n      function clone1(source){\n        if(typeof source === \"object\") {\n          const target = Array.isArray(source) ? [] : {};\n          for(let key in source) {\n            target[key] = clone1(source[key]);\n          }\n          return target;\n        }else{\n          return source;\n        }\n      }\n      const target1 = clone1(obj);\n      console.log(target1);//结果无法克隆get set\n      ```\n\n   3. 完整实现      \n\n      ```js\n      let deepClone1 = (source,target ={})=>{\n        if(typeof source === \"object\" && source !== null){ // 判断source不为基本数据类型\n          const names = Object.getOwnPropertyNames(source);\n          for(let i=0;i<names.length;i++){\n            let description = Object.getOwnPropertyDescriptor(source, names[i]);\n            if(typeof description.value === \"object\" && description.value !== null){\n              let val;\n              if(Array.isArray(description.value)){\n                val = [];\n              }else{\n                val = {};\n              }\n              Object.defineProperty(target,names[i],{\n                configurable: description.configurable,\n                enumerable:description.enumerable,\n                value:val,\n                writable: description.writable,\n              })\n              deepClone1(description.value,val);\n            }else{\n              Object.defineProperty(target,names[i],description);\n            }\n          }\n          return target;\n        }else{\n          return source;\n        }\n      }\n      ```\n\n   4. 循环引用的解决方法\n\n      weakMap\n\n6. 版本对比\n\n  类似 https://leetcode-cn.com/problems/compare-version-numbers/\n\n7. react 中setState多次操作，一共会render几次\n\n8. promise setInterval setTimeout 对比\n\n9. 浏览器事件环 EventLoop\n  当微任务正在执行时，有一个同步任务进入，此时会执行哪个任务？\n  当时回答微任务挂起，执行同步任务。×\n  应该是不会终止微任务的执行的。\n  https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n\n### 二面\n1. UDP和HTTP协议是如何连接的\n\n   是个坑，HTTP下层的传输层协议为TCP\n\n2. 问项目\n\n3. 封装get\n\n   大概是这样的\n\n   ```js\n   const o = {\n     a:{\n       b:{\n         c:1\n       }\n     }\n   };\n   function get(obj,selectStr){\n     let splitStr = selectStr.split(\".\");\n     let target = obj;\n     for(let i = 0;i<splitStr.length;i++){\n       target = target[splitStr[i]];\n     }\n     return target;\n   }\n   ```\n\n4. 手写throttle/debounce\n\n   ```js\n   function throttle(callback,delay){\n     let timer;\n     return function(){\n       const context = this;\n       const args = [...arguments];\n       if(timer){\n         return;\n       }\n       timer = setTimeout(()=>{\n         callback.apply(context,args);\n         timer = null;\n       },delay);\n     }\n   }\n   ```\n\n   ```js\n   function debounce(callback,delay,immediate){//immediate标记是否立即被调用\n     let timer;\n     return function(){\n       const context = this;\n       const args = [...arguments];\n       clearTimeout(timer);\n       if(immediate){\n         let startNow = !timer;\n         timer = setTimeout(()=>{\n           timer = null;\n         },delay);\n         if(startNow) callback.apply(context,args);\n       }else{\n         timer = setTimeout(()=>{\n           callback.apply(context,args);\n         },delay)\n       }\n     }\n   }\n   ```\n\n5. 考虑如何实现用户勾选“记住我”的功能\n\n### 三面\n\n1. 行内元素与块级元素对比，列举常用的行内元素\n\n   - `b`,`big`,`i`,`small`\n\n   - `abbr`,`code`,`code`,`em`,`kbd`,`strong`\n\n   - `a`,`br`,`img`,`span`,`sub`,`sup`\n\n   - `button`,`input`,`label`,`textarea`,`select`\n\n- 内容\n\n  - 一般情况下，行内元素只能包含数据和其他行内元素。\n\n  - 而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。\n\n- 格式\n  - 默认情况下，行内元素不会以新行开始，而块级元素会新起一行。\n\n2. 与webpack相似的打包工具\n\n   <img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\" style=\"zoom:67%;\" /> \n\n   - rollup 更适用于JS库的打包（react、vue、three.js)\n\n     - 代码效率更简洁、效率更高\n\n     - 默认支持 Tree-shaking\n\n       -----\n\n     - 不支持HMR\n\n     - 不支持CommonJs ES新特性\n\n   - parcel\n\n     - 开箱即用，0配置\n\n     - 支持以HTML作为入口\n\n     - 支持HMR\n\n       -----\n     \n     - 根目录不主张放js文件，配置不方便\n\n   - ==unpack== 基于 ESM 的 HMR\n\n     - Snowpack \n\n       - Snowpack利用[JavaScript](https://cloud.tencent.com/product/sms?from=10680)的本机模块系统（称为ESM）来避免不必要的工作并保持流畅的开发体验\n       - ![img](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/79197830-b1a3-11eb-85f6-6fac77c0c9b3.png)\n\n     - vite\n\n       > `vite`会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快\n\n       - 使用`es module`导入代码, 极快的启动速度(ESM)\n\n       - 即时的热模块替换(HMR)\n\n       - 真正的按需编译\n\n         ![1](https://me-file-list.oss-cn-beijing.aliyuncs.com/img/1.png)\n\n3. 最近用到的模块\n\n   可以按不同种类分\n\n   https://www.jianshu.com/p/6836a42ff6ae\n\n   classnames, axios, @testing-library/react, react-create-app,webpack,lodash\n\n\n4. 问项目相关\n5. react JSX是什么，源码相关\n6. 开源协议\n7. package.json 相关\n    script中的命令 默认情况下 会去node_modules/bin下查找，故直接执行右边有可能出错。\n    eg.\n    \"serve\":\"webpack serve --mode=development\"\n    没有全局安装webpack，执行右边命令出错，但是执行npm run serve正常\n  \n","slug":"字节头条前端实习一二三面-hr面","published":1,"updated":"2022-03-03T12:54:31.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplyr0009q8w58f462h4d","content":"<blockquote>\n<p>挂了hr面，当时还是觉得比较可惜</p>\n</blockquote>\n<h3 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h3><ol>\n<li><p>问css: less,sass（可能还问了stylus） 平时有没有在用，熟悉mixin吗</p>\n<blockquote>\n<p>由于平时写的css比较简单，只用到了less很简单的功能。</p>\n</blockquote>\n</li>\n</ol>\n<p>​        复盘：以sass为例，知识点@mixin与@include , 嵌套，定义变量$, 继承变量@extend。</p>\n<ol start=\"2\">\n<li> 移动端适配&amp;postcss</li>\n</ol>\n<p>   px-to-rem 最为常用</p>\n<p>   <a href=\"https://www.jianshu.com/p/8f9aab666c4a\">https://www.jianshu.com/p/8f9aab666c4a</a></p>\n<ol start=\"3\">\n<li>rem与em有什么区别</li>\n</ol>\n<p>​        rem是基于html元素的字体大小来决定，而em则根据使用它的元素的大小决定</p>\n<ol start=\"4\">\n<li><p>浏览器渲染以及强制缓存协商缓存</p>\n<p><a href=\"https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0</a></p>\n<p><a href=\"https://www.jianshu.com/p/9c95db596df5\">https://www.jianshu.com/p/9c95db596df5</a></p>\n</li>\n<li><p>实现deepClone</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: [<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>],</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">d</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">f</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.a = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>丐版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(target))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RegExp、Error对象，则序列化的结果将只得到空对象 RegExp、Error =&gt; {}；</li>\n<li>时间对象(date)，则序列化结果：时间对象=&gt;字符串的形式</li>\n<li> function,undefined 丢失</li>\n<li>NaN、Infinity和-Infinity，则序列化的结果会变成null</li>\n<li>对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor</li>\n</ul>\n</li>\n<li><p>简易实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone1</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">      target[key] = clone1(source[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target1 = clone1(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target1);<span class=\"comment\">//结果无法克隆get set</span></span><br></pre></td></tr></table></figure></li>\n<li><p>完整实现      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deepClone1 = <span class=\"function\">(<span class=\"params\">source,target =&#123;&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; source !== <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 判断source不为基本数据类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> names = <span class=\"built_in\">Object</span>.getOwnPropertyNames(source);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> description = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, names[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> description.value === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; description.value !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(description.value))&#123;</span><br><span class=\"line\">          val = [];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          val = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(target,names[i],&#123;</span><br><span class=\"line\">          <span class=\"attr\">configurable</span>: description.configurable,</span><br><span class=\"line\">          <span class=\"attr\">enumerable</span>:description.enumerable,</span><br><span class=\"line\">          <span class=\"attr\">value</span>:val,</span><br><span class=\"line\">          <span class=\"attr\">writable</span>: description.writable,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        deepClone1(description.value,val);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(target,names[i],description);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>循环引用的解决方法</p>\n<p>weakMap</p>\n</li>\n</ol>\n</li>\n<li><p>版本对比</p>\n</li>\n</ol>\n<p>  类似 <a href=\"https://leetcode-cn.com/problems/compare-version-numbers/\">https://leetcode-cn.com/problems/compare-version-numbers/</a></p>\n<ol start=\"7\">\n<li><p>react 中setState多次操作，一共会render几次</p>\n</li>\n<li><p>promise setInterval setTimeout 对比</p>\n</li>\n<li><p>浏览器事件环 EventLoop<br>当微任务正在执行时，有一个同步任务进入，此时会执行哪个任务？<br>当时回答微任务挂起，执行同步任务。×<br>应该是不会终止微任务的执行的。<br><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n</li>\n</ol>\n<h3 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h3><ol>\n<li><p>UDP和HTTP协议是如何连接的</p>\n<p>是个坑，HTTP下层的传输层协议为TCP</p>\n</li>\n<li><p>问项目</p>\n</li>\n<li><p>封装get</p>\n<p>大概是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">c</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">obj,selectStr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> splitStr = selectStr.split(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = obj;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;splitStr.length;i++)&#123;</span><br><span class=\"line\">    target = target[splitStr[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>手写throttle/debounce</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">callback,delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      callback.apply(context,args);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback,delay,immediate</span>)</span>&#123;<span class=\"comment\">//immediate标记是否立即被调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments];</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(immediate)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> startNow = !timer;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;,delay);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(startNow) callback.apply(context,args);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        callback.apply(context,args);</span><br><span class=\"line\">      &#125;,delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>考虑如何实现用户勾选“记住我”的功能</p>\n</li>\n</ol>\n<h3 id=\"三面\"><a href=\"#三面\" class=\"headerlink\" title=\"三面\"></a>三面</h3><ol>\n<li><p>行内元素与块级元素对比，列举常用的行内元素</p>\n<ul>\n<li><p><code>b</code>,<code>big</code>,<code>i</code>,<code>small</code></p>\n</li>\n<li><p><code>abbr</code>,<code>code</code>,<code>code</code>,<code>em</code>,<code>kbd</code>,<code>strong</code></p>\n</li>\n<li><p><code>a</code>,<code>br</code>,<code>img</code>,<code>span</code>,<code>sub</code>,<code>sup</code></p>\n</li>\n<li><p><code>button</code>,<code>input</code>,<code>label</code>,<code>textarea</code>,<code>select</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>内容</p>\n<ul>\n<li><p>一般情况下，行内元素只能包含数据和其他行内元素。</p>\n</li>\n<li><p>而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</p>\n</li>\n</ul>\n</li>\n<li><p>格式</p>\n<ul>\n<li>默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>与webpack相似的打包工具</p>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\" style=\"zoom:67%;\" /> \n\n<ul>\n<li><p>rollup 更适用于JS库的打包（react、vue、three.js)</p>\n<ul>\n<li><p>代码效率更简洁、效率更高</p>\n</li>\n<li><p>默认支持 Tree-shaking</p>\n<hr>\n</li>\n<li><p>不支持HMR</p>\n</li>\n<li><p>不支持CommonJs ES新特性</p>\n</li>\n</ul>\n</li>\n<li><p>parcel</p>\n<ul>\n<li><p>开箱即用，0配置</p>\n</li>\n<li><p>支持以HTML作为入口</p>\n</li>\n<li><p>支持HMR</p>\n<hr>\n</li>\n<li><p>根目录不主张放js文件，配置不方便</p>\n</li>\n</ul>\n</li>\n<li><p>==unpack== 基于 ESM 的 HMR</p>\n<ul>\n<li><p>Snowpack </p>\n<ul>\n<li>Snowpack利用<a href=\"https://cloud.tencent.com/product/sms?from=10680\">JavaScript</a>的本机模块系统（称为ESM）来避免不必要的工作并保持流畅的开发体验</li>\n<li><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/79197830-b1a3-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li><p>vite</p>\n<blockquote>\n<p><code>vite</code>会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快</p>\n</blockquote>\n<ul>\n<li><p>使用<code>es module</code>导入代码, 极快的启动速度(ESM)</p>\n</li>\n<li><p>即时的热模块替换(HMR)</p>\n</li>\n<li><p>真正的按需编译</p>\n<p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/1.png\" alt=\"1\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最近用到的模块</p>\n<p>可以按不同种类分</p>\n<p><a href=\"https://www.jianshu.com/p/6836a42ff6ae\">https://www.jianshu.com/p/6836a42ff6ae</a></p>\n<p>classnames, axios, @testing-library/react, react-create-app,webpack,lodash</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>问项目相关</li>\n<li>react JSX是什么，源码相关</li>\n<li>开源协议</li>\n<li>package.json 相关<br> script中的命令 默认情况下 会去node_modules/bin下查找，故直接执行右边有可能出错。<br> eg.<br> “serve”:”webpack serve –mode=development”<br> 没有全局安装webpack，执行右边命令出错，但是执行npm run serve正常</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>挂了hr面，当时还是觉得比较可惜</p>\n</blockquote>\n<h3 id=\"一面\"><a href=\"#一面\" class=\"headerlink\" title=\"一面\"></a>一面</h3><ol>\n<li><p>问css: less,sass（可能还问了stylus） 平时有没有在用，熟悉mixin吗</p>\n<blockquote>\n<p>由于平时写的css比较简单，只用到了less很简单的功能。</p>\n</blockquote>\n</li>\n</ol>\n<p>​        复盘：以sass为例，知识点@mixin与@include , 嵌套，定义变量$, 继承变量@extend。</p>\n<ol start=\"2\">\n<li> 移动端适配&amp;postcss</li>\n</ol>\n<p>   px-to-rem 最为常用</p>\n<p>   <a href=\"https://www.jianshu.com/p/8f9aab666c4a\">https://www.jianshu.com/p/8f9aab666c4a</a></p>\n<ol start=\"3\">\n<li>rem与em有什么区别</li>\n</ol>\n<p>​        rem是基于html元素的字体大小来决定，而em则根据使用它的元素的大小决定</p>\n<ol start=\"4\">\n<li><p>浏览器渲染以及强制缓存协商缓存</p>\n<p><a href=\"https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0\">https://www.bilibili.com/video/BV1x54y1B7RE?spm_id_from=333.999.0.0</a></p>\n<p><a href=\"https://www.jianshu.com/p/9c95db596df5\">https://www.jianshu.com/p/9c95db596df5</a></p>\n</li>\n<li><p>实现deepClone</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: [<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>],</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">d</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">e</span>: <span class=\"number\">23</span>,</span><br><span class=\"line\">    <span class=\"attr\">f</span>: <span class=\"number\">34</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title\">f</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.a = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title\">f</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.a;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>丐版</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(target))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RegExp、Error对象，则序列化的结果将只得到空对象 RegExp、Error =&gt; {}；</li>\n<li>时间对象(date)，则序列化结果：时间对象=&gt;字符串的形式</li>\n<li> function,undefined 丢失</li>\n<li>NaN、Infinity和-Infinity，则序列化的结果会变成null</li>\n<li>对象是由构造函数生成的，则序列化的结果会丢弃对象的 constructor</li>\n</ul>\n</li>\n<li><p>简易实现</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone1</span>(<span class=\"params\">source</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">      target[key] = clone1(source[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> target1 = clone1(obj);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target1);<span class=\"comment\">//结果无法克隆get set</span></span><br></pre></td></tr></table></figure></li>\n<li><p>完整实现      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> deepClone1 = <span class=\"function\">(<span class=\"params\">source,target =&#123;&#125;</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> source === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; source !== <span class=\"literal\">null</span>)&#123; <span class=\"comment\">// 判断source不为基本数据类型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> names = <span class=\"built_in\">Object</span>.getOwnPropertyNames(source);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;names.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> description = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(source, names[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> description.value === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; description.value !== <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Array</span>.isArray(description.value))&#123;</span><br><span class=\"line\">          val = [];</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          val = &#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(target,names[i],&#123;</span><br><span class=\"line\">          <span class=\"attr\">configurable</span>: description.configurable,</span><br><span class=\"line\">          <span class=\"attr\">enumerable</span>:description.enumerable,</span><br><span class=\"line\">          <span class=\"attr\">value</span>:val,</span><br><span class=\"line\">          <span class=\"attr\">writable</span>: description.writable,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        deepClone1(description.value,val);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">Object</span>.defineProperty(target,names[i],description);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>循环引用的解决方法</p>\n<p>weakMap</p>\n</li>\n</ol>\n</li>\n<li><p>版本对比</p>\n</li>\n</ol>\n<p>  类似 <a href=\"https://leetcode-cn.com/problems/compare-version-numbers/\">https://leetcode-cn.com/problems/compare-version-numbers/</a></p>\n<ol start=\"7\">\n<li><p>react 中setState多次操作，一共会render几次</p>\n</li>\n<li><p>promise setInterval setTimeout 对比</p>\n</li>\n<li><p>浏览器事件环 EventLoop<br>当微任务正在执行时，有一个同步任务进入，此时会执行哪个任务？<br>当时回答微任务挂起，执行同步任务。×<br>应该是不会终止微任务的执行的。<br><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n</li>\n</ol>\n<h3 id=\"二面\"><a href=\"#二面\" class=\"headerlink\" title=\"二面\"></a>二面</h3><ol>\n<li><p>UDP和HTTP协议是如何连接的</p>\n<p>是个坑，HTTP下层的传输层协议为TCP</p>\n</li>\n<li><p>问项目</p>\n</li>\n<li><p>封装get</p>\n<p>大概是这样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>:&#123;</span><br><span class=\"line\">      <span class=\"attr\">c</span>:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">obj,selectStr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> splitStr = selectStr.split(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = obj;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i&lt;splitStr.length;i++)&#123;</span><br><span class=\"line\">    target = target[splitStr[i]];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>手写throttle/debounce</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">callback,delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">      callback.apply(context,args);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,delay);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">callback,delay,immediate</span>)</span>&#123;<span class=\"comment\">//immediate标记是否立即被调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> context = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...arguments];</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(immediate)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> startNow = !timer;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;,delay);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(startNow) callback.apply(context,args);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        callback.apply(context,args);</span><br><span class=\"line\">      &#125;,delay)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>考虑如何实现用户勾选“记住我”的功能</p>\n</li>\n</ol>\n<h3 id=\"三面\"><a href=\"#三面\" class=\"headerlink\" title=\"三面\"></a>三面</h3><ol>\n<li><p>行内元素与块级元素对比，列举常用的行内元素</p>\n<ul>\n<li><p><code>b</code>,<code>big</code>,<code>i</code>,<code>small</code></p>\n</li>\n<li><p><code>abbr</code>,<code>code</code>,<code>code</code>,<code>em</code>,<code>kbd</code>,<code>strong</code></p>\n</li>\n<li><p><code>a</code>,<code>br</code>,<code>img</code>,<code>span</code>,<code>sub</code>,<code>sup</code></p>\n</li>\n<li><p><code>button</code>,<code>input</code>,<code>label</code>,<code>textarea</code>,<code>select</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>内容</p>\n<ul>\n<li><p>一般情况下，行内元素只能包含数据和其他行内元素。</p>\n</li>\n<li><p>而块级元素可以包含行内元素和其他块级元素。这种结构上的包含继承区别可以使块级元素创建比行内元素更”大型“的结构。</p>\n</li>\n</ul>\n</li>\n<li><p>格式</p>\n<ul>\n<li>默认情况下，行内元素不会以新行开始，而块级元素会新起一行。</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>与webpack相似的打包工具</p>\n<img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/8ed8d520-b1a4-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\" style=\"zoom:67%;\" /> \n\n<ul>\n<li><p>rollup 更适用于JS库的打包（react、vue、three.js)</p>\n<ul>\n<li><p>代码效率更简洁、效率更高</p>\n</li>\n<li><p>默认支持 Tree-shaking</p>\n<hr>\n</li>\n<li><p>不支持HMR</p>\n</li>\n<li><p>不支持CommonJs ES新特性</p>\n</li>\n</ul>\n</li>\n<li><p>parcel</p>\n<ul>\n<li><p>开箱即用，0配置</p>\n</li>\n<li><p>支持以HTML作为入口</p>\n</li>\n<li><p>支持HMR</p>\n<hr>\n</li>\n<li><p>根目录不主张放js文件，配置不方便</p>\n</li>\n</ul>\n</li>\n<li><p>==unpack== 基于 ESM 的 HMR</p>\n<ul>\n<li><p>Snowpack </p>\n<ul>\n<li>Snowpack利用<a href=\"https://cloud.tencent.com/product/sms?from=10680\">JavaScript</a>的本机模块系统（称为ESM）来避免不必要的工作并保持流畅的开发体验</li>\n<li><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/79197830-b1a3-11eb-85f6-6fac77c0c9b3.png\" alt=\"img\"></li>\n</ul>\n</li>\n<li><p>vite</p>\n<blockquote>\n<p><code>vite</code>会直接启动开发服务器，不需要进行打包操作，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快</p>\n</blockquote>\n<ul>\n<li><p>使用<code>es module</code>导入代码, 极快的启动速度(ESM)</p>\n</li>\n<li><p>即时的热模块替换(HMR)</p>\n</li>\n<li><p>真正的按需编译</p>\n<p><img src=\"https://me-file-list.oss-cn-beijing.aliyuncs.com/img/1.png\" alt=\"1\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>最近用到的模块</p>\n<p>可以按不同种类分</p>\n<p><a href=\"https://www.jianshu.com/p/6836a42ff6ae\">https://www.jianshu.com/p/6836a42ff6ae</a></p>\n<p>classnames, axios, @testing-library/react, react-create-app,webpack,lodash</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>问项目相关</li>\n<li>react JSX是什么，源码相关</li>\n<li>开源协议</li>\n<li>package.json 相关<br> script中的命令 默认情况下 会去node_modules/bin下查找，故直接执行右边有可能出错。<br> eg.<br> “serve”:”webpack serve –mode=development”<br> 没有全局安装webpack，执行右边命令出错，但是执行npm run serve正常</li>\n</ol>\n"},{"title":"实现模板字符串&replace复习","date":"2022-02-27T12:13:15.000Z","_content":"\njavaScript在线测试正则网站：https://regexr.com/\n\nmdn replace方法详解：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n代码实现：\n\n**函数function(str, obj)\t`\"{name} is {age}\"`&`{name:\"tom\",age:\"20\"}`->\"tom is 20\"**\n\n```js\nfunction template(str, obj) {\n  const reg = /{(\\w+)}/g;\n  return str.replace(reg, (match, key) => {\n    //key代表正则表达式中的括号里匹配到的第一个字符串\n    console.log(match,key);\n    /*\n    * {name} name\n    * {key} key\n    */\n    return obj[key];\n  });\n}\nconst res = template(\"{name} is {age}\", { name: \"jac\", age: 20 });\nconsole.log(res);// jac is 20\n```\n\n","source":"_posts/实现模板字符串-replace复习.md","raw":"---\ntitle: 实现模板字符串&replace复习\ndate: 2022-02-27 20:13:15\ntags: 模板字符串实现, replace\n---\n\njavaScript在线测试正则网站：https://regexr.com/\n\nmdn replace方法详解：https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n代码实现：\n\n**函数function(str, obj)\t`\"{name} is {age}\"`&`{name:\"tom\",age:\"20\"}`->\"tom is 20\"**\n\n```js\nfunction template(str, obj) {\n  const reg = /{(\\w+)}/g;\n  return str.replace(reg, (match, key) => {\n    //key代表正则表达式中的括号里匹配到的第一个字符串\n    console.log(match,key);\n    /*\n    * {name} name\n    * {key} key\n    */\n    return obj[key];\n  });\n}\nconst res = template(\"{name} is {age}\", { name: \"jac\", age: 20 });\nconsole.log(res);// jac is 20\n```\n\n","slug":"实现模板字符串-replace复习","published":1,"updated":"2022-02-27T12:33:39.636Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplys000aq8w5hmqtawkk","content":"<p>javaScript在线测试正则网站：<a href=\"https://regexr.com/\">https://regexr.com/</a></p>\n<p>mdn replace方法详解：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p>\n<p>代码实现：</p>\n<p><strong>函数function(str, obj)    <code>&quot;&#123;name&#125; is &#123;age&#125;&quot;</code>&amp;<code>&#123;name:&quot;tom&quot;,age:&quot;20&quot;&#125;</code>-&gt;”tom is 20”</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">template</span>(<span class=\"params\">str, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/&#123;(\\w+)&#125;/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(reg, <span class=\"function\">(<span class=\"params\">match, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//key代表正则表达式中的括号里匹配到的第一个字符串</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(match,key);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;name&#125; name</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;key&#125; key</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = template(<span class=\"string\">&quot;&#123;name&#125; is &#123;age&#125;&quot;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;jac&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">// jac is 20</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>javaScript在线测试正则网站：<a href=\"https://regexr.com/\">https://regexr.com/</a></p>\n<p>mdn replace方法详解：<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a></p>\n<p>代码实现：</p>\n<p><strong>函数function(str, obj)    <code>&quot;&#123;name&#125; is &#123;age&#125;&quot;</code>&amp;<code>&#123;name:&quot;tom&quot;,age:&quot;20&quot;&#125;</code>-&gt;”tom is 20”</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">template</span>(<span class=\"params\">str, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> reg = <span class=\"regexp\">/&#123;(\\w+)&#125;/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str.replace(reg, <span class=\"function\">(<span class=\"params\">match, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//key代表正则表达式中的括号里匹配到的第一个字符串</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(match,key);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;name&#125; name</span></span><br><span class=\"line\"><span class=\"comment\">    * &#123;key&#125; key</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> res = template(<span class=\"string\">&quot;&#123;name&#125; is &#123;age&#125;&quot;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;jac&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">20</span> &#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res);<span class=\"comment\">// jac is 20</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"常见前端手写代码题","date":"2022-02-09T15:18:07.000Z","_content":"\n### new的过程发生了什么\n\n在new的过程中\n- 像普通函数执行一样，形成一个私有的作用域\n   +形参赋值\n   +变量提升\n- 默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前的一个实例\n- 执行代码\n- 把默认创建的对象返回\n\n```js\nfunction _new(Fn, ...arg) {\n  // let obj = {};\n  // obj.__proto__ = Fn.prototype;\n  //创建一个空对象 并使其作为Fn.prototype的所属的构造函数\n  let obj = Object.create(Fn.prototype);\n  //记录函数的返回值，如果返回对象或函数则return res\n  const res = Fn.call(obj, ...arg);\n  const isObjOrFunc =  typeof res === \"function\" || (typeof res === \"object\" && res !== null);\n  return isObjOrFunc ? res : obj;\n}\n```\n\n### 用requestAnimationFrame写setTimeout\n\n```js\nconst _timerId = {};//记录定时器的编号\nlet _id = 0;\nfunction mySetTimeOut(fn, delay, ...args) {\n  const start = new Date().getTime();\n  const cid = ++_id;\n  const loop = () => {\n    const time = new Date().getTime();\n    if (time >= delay + start){\n      fn.apply(this, args);\n      delete _timerId[cid];\n    } else {\n      _timerId[cid] = requestAnimationFrame(loop);\n    }\n  };\n  _timerId[cid] = requestAnimationFrame(loop);\n  return cid;\n}\n//测试部分\nconst timer = mySetTimeOut(()=>{console.log(123)},2000)\nconsole.log(timer);\n```\n\n```\n```\n","source":"_posts/手撕前端算法.md","raw":"---\ntitle: 常见前端手写代码题\ndate: 2022-02-09 23:18:07\ntags: 算法\n---\n\n### new的过程发生了什么\n\n在new的过程中\n- 像普通函数执行一样，形成一个私有的作用域\n   +形参赋值\n   +变量提升\n- 默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前的一个实例\n- 执行代码\n- 把默认创建的对象返回\n\n```js\nfunction _new(Fn, ...arg) {\n  // let obj = {};\n  // obj.__proto__ = Fn.prototype;\n  //创建一个空对象 并使其作为Fn.prototype的所属的构造函数\n  let obj = Object.create(Fn.prototype);\n  //记录函数的返回值，如果返回对象或函数则return res\n  const res = Fn.call(obj, ...arg);\n  const isObjOrFunc =  typeof res === \"function\" || (typeof res === \"object\" && res !== null);\n  return isObjOrFunc ? res : obj;\n}\n```\n\n### 用requestAnimationFrame写setTimeout\n\n```js\nconst _timerId = {};//记录定时器的编号\nlet _id = 0;\nfunction mySetTimeOut(fn, delay, ...args) {\n  const start = new Date().getTime();\n  const cid = ++_id;\n  const loop = () => {\n    const time = new Date().getTime();\n    if (time >= delay + start){\n      fn.apply(this, args);\n      delete _timerId[cid];\n    } else {\n      _timerId[cid] = requestAnimationFrame(loop);\n    }\n  };\n  _timerId[cid] = requestAnimationFrame(loop);\n  return cid;\n}\n//测试部分\nconst timer = mySetTimeOut(()=>{console.log(123)},2000)\nconsole.log(timer);\n```\n\n```\n```\n","slug":"手撕前端算法","published":1,"updated":"2022-02-26T12:29:16.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0azplys000cq8w5do5jbtkb","content":"<h3 id=\"new的过程发生了什么\"><a href=\"#new的过程发生了什么\" class=\"headerlink\" title=\"new的过程发生了什么\"></a>new的过程发生了什么</h3><p>在new的过程中</p>\n<ul>\n<li>像普通函数执行一样，形成一个私有的作用域<br> +形参赋值<br> +变量提升</li>\n<li>默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前的一个实例</li>\n<li>执行代码</li>\n<li>把默认创建的对象返回</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">Fn, ...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// let obj = &#123;&#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// obj.__proto__ = Fn.prototype;</span></span><br><span class=\"line\">  <span class=\"comment\">//创建一个空对象 并使其作为Fn.prototype的所属的构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(Fn.prototype);</span><br><span class=\"line\">  <span class=\"comment\">//记录函数的返回值，如果返回对象或函数则return res</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = Fn.call(obj, ...arg);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjOrFunc =  <span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;function&quot;</span> || (<span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; res !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isObjOrFunc ? res : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用requestAnimationFrame写setTimeout\"><a href=\"#用requestAnimationFrame写setTimeout\" class=\"headerlink\" title=\"用requestAnimationFrame写setTimeout\"></a>用requestAnimationFrame写setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _timerId = &#123;&#125;;<span class=\"comment\">//记录定时器的编号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _id = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySetTimeOut</span>(<span class=\"params\">fn, delay, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cid = ++_id;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loop = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time &gt;= delay + start)&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> _timerId[cid];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _timerId[cid] = requestAnimationFrame(loop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  _timerId[cid] = requestAnimationFrame(loop);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timer = mySetTimeOut(<span class=\"function\">()=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timer);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"new的过程发生了什么\"><a href=\"#new的过程发生了什么\" class=\"headerlink\" title=\"new的过程发生了什么\"></a>new的过程发生了什么</h3><p>在new的过程中</p>\n<ul>\n<li>像普通函数执行一样，形成一个私有的作用域<br> +形参赋值<br> +变量提升</li>\n<li>默认创建一个对象，让函数中的this执行这个对象，这个对象就是当前的一个实例</li>\n<li>执行代码</li>\n<li>把默认创建的对象返回</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_new</span>(<span class=\"params\">Fn, ...arg</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// let obj = &#123;&#125;;</span></span><br><span class=\"line\">  <span class=\"comment\">// obj.__proto__ = Fn.prototype;</span></span><br><span class=\"line\">  <span class=\"comment\">//创建一个空对象 并使其作为Fn.prototype的所属的构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = <span class=\"built_in\">Object</span>.create(Fn.prototype);</span><br><span class=\"line\">  <span class=\"comment\">//记录函数的返回值，如果返回对象或函数则return res</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = Fn.call(obj, ...arg);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isObjOrFunc =  <span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;function&quot;</span> || (<span class=\"keyword\">typeof</span> res === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; res !== <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isObjOrFunc ? res : obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用requestAnimationFrame写setTimeout\"><a href=\"#用requestAnimationFrame写setTimeout\" class=\"headerlink\" title=\"用requestAnimationFrame写setTimeout\"></a>用requestAnimationFrame写setTimeout</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _timerId = &#123;&#125;;<span class=\"comment\">//记录定时器的编号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _id = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySetTimeOut</span>(<span class=\"params\">fn, delay, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cid = ++_id;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loop = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time &gt;= delay + start)&#123;</span><br><span class=\"line\">      fn.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> _timerId[cid];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _timerId[cid] = requestAnimationFrame(loop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  _timerId[cid] = requestAnimationFrame(loop);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//测试部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> timer = mySetTimeOut(<span class=\"function\">()=&gt;</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>)&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(timer);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl0azplyj0001q8w5dr9whs3t","tag_id":"cl0azplyn0003q8w5fw42hx24","_id":"cl0azplyr0008q8w5gbs72sww"},{"post_id":"cl0azplyo0004q8w58ohk63x7","tag_id":"cl0azplyq0007q8w58qoq6heu","_id":"cl0azplyt000dq8w52bs713d2"},{"post_id":"cl0azplyp0005q8w5ekzidyat","tag_id":"cl0azplys000bq8w54n1781c0","_id":"cl0azplyu000fq8w554o2e7rg"},{"post_id":"cl0azplyq0006q8w58o549fdy","tag_id":"cl0azplyu000eq8w5byijeqjx","_id":"cl0azplyu000hq8w5elbk3qvi"},{"post_id":"cl0azplyr0009q8w58f462h4d","tag_id":"cl0azplyu000gq8w5g6m09y9z","_id":"cl0azplyu000jq8w592jtbsl7"},{"post_id":"cl0azplys000aq8w5hmqtawkk","tag_id":"cl0azplyu000iq8w5542gdpby","_id":"cl0azplyv000lq8w51bd9gcz4"},{"post_id":"cl0azplys000cq8w5do5jbtkb","tag_id":"cl0azplyv000kq8w51fia3ocp","_id":"cl0azplyv000mq8w53xinb0ha"}],"Tag":[{"name":"cookie","_id":"cl0azplyn0003q8w5fw42hx24"},{"name":"BFC, 两栏布局, 圣杯布局, 双飞翼布局","_id":"cl0azplyq0007q8w58qoq6heu"},{"name":"react,源码学习","_id":"cl0azplys000bq8w54n1781c0"},{"name":"typora, picGo, oss","_id":"cl0azplyu000eq8w5byijeqjx"},{"name":"字节, 前端面试","_id":"cl0azplyu000gq8w5g6m09y9z"},{"name":"模板字符串实现, replace","_id":"cl0azplyu000iq8w5542gdpby"},{"name":"算法","_id":"cl0azplyv000kq8w51fia3ocp"}]}}